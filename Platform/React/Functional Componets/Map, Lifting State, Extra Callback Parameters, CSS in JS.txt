

Iterating with map 

    Working with lists (arrays in JavaScript) is a big part of a devs life, Accordingly, we'll often need to iterate through arrays of dat and render some JSX for each item. While some frameworks supply framework-specific ways to loop through arrays, React instead leans on a built-in array method: map. Let's briefly cover how the map method works. Consider the following code snippet that will create a new array-newNums that has double the value of each element from the original array-nums. 

        const nums = [1, 2, 3, 4, 5];
        
        const newNums = [];
        
        for(let i = 0; i < nums.length; i++) {
            newNums.push( nums[i] * 2 );
        }
        
        console.log( newNums ); // logs [2, 4, 6, 8, 10]

    While this works, there are better ways of doing this in React. Note that we had to create the local variable i as the iterator to reference the appropriate index in the array. Also we continuously mutated(changed) the newNums array by pushing a value to it during each iteration in the loop. 

    Let's see how we could accomplish the same work as above using the map method for arrays in JavaScript.

        const nums = [1, 2, 3, 4, 5];
        
        const newNums = nums.map( (num) => {
            return num * 2;
        } );
        
        console.log( newNums ); // logs [2, 4, 6, 8, 10]

    First, we create a new consonant variable called newNums that is assigned the result of invoking the map method on the original nums array. Next, we created an anonymous function that will always return double the supplied argument, given that the argument is a number. map() will pass in each element from the array one at a tim e (num) to our anonymous function just like a for loop and will return a new value for a new array element. newNums is now an array with the same number of elements as nums, but each value is double of the original. In general, you can use the map method whenever you want to transform each element of an array according to a function. An important thing to note is that the result of calling the map method is a new array, it does not change the original array values. 

    Another way to write this code is using a function. 

        const nums = [1, 2, 3, 4, 5];
        
        function double(num) {
            return num * 2;
        }
        
        const newNums = nums.map( double );
        
        console.log( newNums ); // logs [2, 4, 6, 8, 10]

    By using the map method with an argument of double (a function) we were able to accomplish the exact same work. Notice that we were able to pass in the entire definition of double when we called map. Functions are "first-class citizens" in JavaScript: that is they can be passed around in the same way  as other values. The "value of a double is the entire function including the parameters and the block of code that does the work. 


Map in React 

    Now let's see how we can apply this in React. 

        import React from 'react';
        
        const Groceries = (props) => {
            // this could just as easily come from props
            const groceryList = ["pearl onions", "thyme", "cremini mushrooms", "butter"];
            return (
                <ul>
                {
                    groceryList.map( (item, index) => 
                        <li key={ index }>{ item }</li>
                    )
                }
                </ul>
            ); 
        }
            
        export default Groceries;

    In this component we have a list of grocery items, and we return an unordered list. Inside of the <ul> we use map to transform the array of groceries into an array of <li>, and for each element(item), we use its index (index) as the key attribute's value to silence a react warning. Where did the index come from? The function we supply can optionally take in two additional arguments in addition to the current element value: the current index, and a reference to the array itself. Thus, the entire signature (set of parameters) of map callback could look like the following

        function(currentVal, currentIndex, thisArray) {
        // transform currentVal here
        }
    
    Trust us. This is a great time to look at some official docs 

        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map

        https://reactjs.org/docs/lists-and-keys.html


Lifting State 

    State is a very valuable resource to us as developers! But what if i need to share that data between multiple components? The process of "lifting state" to a common parent component would give us a way to share the setter and getter down through props to all the child components that need to have access to them. Its easer to demonstrate than to explain. 

    Lets say that we want to make an app that contains a component for creating messages and another component for displaying messages. They will both need access to the "same" state, but they are separate components. Let's lift state up to the common parent then pass down state to the getter and setter as needed. 


