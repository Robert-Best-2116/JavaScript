

Functional VS Class Components 

    Using React, we can build components as either classes or functions. Historically, class components have been the way to go. Class components were more robust, and had the ability to handle things such as state. Functional components did not have state directly tied to them. Whereas class components had them built in as an attribute to the Component class. 

    With the creation of hooks, we can now access component state in a functional component. Class components have been slowly overtaken by functional components. The React team has stated that they are still going to support class components. You can mix and match them and the code will still work. Going forward, due to teh increasing relevance of functional components we will be using them exclusively in the beginning. 

    Since hooks are relatively new, and many existing code bases still use class components we cannot overlook them. As a result we will learn more about class components later in the stack. 


Functional Components 

    Conceptually, components are like JavaScript functions. They accept arbitrary inputs called props and return React elements describing what should appear on the screen. 

    A React component is simply defined by a function that returns a React Element 

    When creating a Functional Component there are a couple things we have to do in order for it to be a valid component. Each component must: 

        1. Import the React library from 'react'
        2. Have a name starting with a capital letter ex: SomeFunctionalComponent
        3. Returns a single parent React Element using JSX such as the <div> or <> 
        4. Exports the component name export default SomeFunctionalComponent

    SomeFunctionalComponent.js 

        import React from 'react';
            
        const SomeFunctionalComponent = (props) => {
            return (
                <div>
                    This is our first functional component.
                </div>
            )
        }
            
        export default SomeFunctionalComponent;

    We will be using functional components extensively throughout this course. Lets take a look at a single implementation of a functional React component: 

    PersonCard.js 

        import React from 'react' 
        const PersonCard = (props) => {
            return(
                <div>
                    <h1 style={{color:"red"}}>Instructor Bob</h1.
                    <p>Age: 32</p.
                    <p>Hair Color: black</p>
                </div>
            );
        }
        export default PersonCard


Props 

    Props, short for properties, is an empty JavaScript object that is constructed and passed to every react component by default. To pass down props to our child components, we simply need to add one or more HTML attributes to our component. Each attribute will become a key in the props object and each value given to that attribute will become the value of that key. 

    /src/App.js 

        import './App.css';
        import Header from './components/Header';
        function App() {
        return (
            <div className="App">
            // passing in 2 attributes to the Header component through the default props object which will look like this:
            // {
            //    "firstName":"Bill",
            //    "lastName":"Justice"
            // }
            <Header firstName={ "Bill" } lastName={ "Justice" } />
            </div>
        );
        }
        export default App;

        In our functional components we use an arrow function that accepts an argument, that must be called props. We can access the values being passed down via props.keyName. So we could write the component like this 


    /src/components/Header.js 

        // Here we create the Header Component that will receive props and we know we want to have a user
        //     first and last name
        import React from 'react';
            
        const Header = (props) => {
            // We can assume props looks like an object literal with 2 keys and values because of what was passed in
            // {
            //    "firstName":"Bill",
            //    "lastName":"Justice"
            // }
            return (
                <div>
                    <h1>
                        My name is {props.firstName} {props.lastName}
                    </h1>
                </div>
            );
        }
        export default Header;


        we could also simplify access to the values by destructuring our props into local variables this way. 

            const { firstName, lastName } = props;

        This syntax allows us to create local  variables instead of having to use dot notation. The names inside of the curly brackets must match the key names found in the props object. 

        The following is modified to allow you to see destructuring in the same example as above. 


            // Here we create the Header Component that will receive props and we know we want to have a user
            //     first and last name
            import React from 'react';
                
            const Header = (props) => {
                // We can assume props looks like an object literal with 2 keys and values because of what was passed in
                // {
                //    "firstName":"Bill",
                //    "lastName":"Justice"
                // }
                // destructuring props in to 2 local variables that MUST match the key names found in the props object
                const { firstName, lastName } = props; 
                return (
                    <div>
                        <h1>
                        // Destructuring allows us to use them like simple variables
                            My name is { firstName } { lastName }
                        </h1>
                    </div>
                );
            }
            export default Header;

    
    Flow of Data 

        Because the data flow in React flows downward, we use props all the time to pass data down from component to component. 

        We are not limited in the number of attributes we can pass down through our props object. We can pass anything down we want including functions, using props. 

            A Note on Curly Braces: In JSX, we use curly braces to denote a JavaScript expression. Typically, you can only send down strings in props. However, with curly braces, we can send JavaScript expressions (assuming they are valid). This includes numbers, strings, functions, objects, etc. Examples below. 

                <SomeComponent someProp="test" someOtherProp={ 67 } /> // Valid. We can send normal strings, numbers need curly braces
                <SomeComponent someProp={ "test" } someOtherProp={ 67 } /> // Valid. A String is still a Javascript expression
                <SomeComponent someProp="test" someOtherProp=67 /> // Invalid. Numbers need curly braces
