

Express + Mongoose 

    Mongoose 

        Now that we understand our MongoDB basics, lets connect it to a project and see it in action. The most popular way of using MongoDB with Node and Express is with a library called Mongoose. Mongoose simplifies making making MongoDB queries with its own library methods. This means that we can connect mongoose directly to a MongoDB database and it will allow us to give more structure to our data with the addition of models and schemas. Mongoose will act as a layer between our application and our database enabling us to do things like validate and run complex queries more effectively. 

    
    Installing Mongoose 

        Start by creating the server folder for your project, and create the server.js file as well as creating the following folder structure. 

            Server- This is your backend server/project folder and will hold all the server related files 
                Config-Will handle all the database configuration and connection
                Controllers-Will hold all CRUD functionality for each model 
                Models-Will hold all the schemas
                Routes-Will handle all of the routes for each model
                server.js-Will handle all the server logic with express 

        Once you have created the server.js file and the folders open a new terminal window and navigate to your project folder, go into the server folder and install the server dependencies by running: 

            npm init -y 
            npm install mongoose express 

        Note: Any file that will use the Mongoose library will need to require it at the top of the file like this 

            const mongoose = require("mongoose");

    
    Connecting to MongoDB with Mongoose 

        In vs-code, navigate to the config folder where you will need to create the mongoose.config.js file. This is where we use mongoose to connect to MongoDB. Mongoose has a super connivent connection method-mongoose.connect. 

            const mongoose = require('mongoose');
             
            mongoose.connect('mongodb://127.0.0.1:27017/name_of_your_DB', {
                useNewUrlParser: true,
                useUnifiedTopology: true
            })
                .then(() => console.log('Established a connection to the database'))
                .catch(err => console.log('Something went wrong when connecting to the database ', err));

        Note: the useNewUrlParser and useUnifiedTopology are options we pass to get rid of deprecation messages in our terminal. 

        Note: If you connect to a database that doesn't exist, Mongoose will create the DB for you as soon as you create your first document. 


    Create your Mongoose Schema and Model 

        Mongoose provides more structure to MongoDB by adding schemas that we can create that turn into models for our collections. These models specify keys, types, and validations for documents in a specific collection. Mongoose also handles appropriate naming for us when it communicates with MongoDB. 

        In VS Code, navigate your way to the models folder and create the user.model.js file in the models folder where we create a User collection using mongoose. Remember we need to import mongoose using the require statement at the top of the file. 

            const mongoose = require('mongoose');
             
            const UserSchema = new mongoose.Schema({
                name: {
                    type: String
                },
                age: {
                    type: Number
                }
            });
             
            const User = mongoose.model('User', UserSchema);

        Lets break this down. The mongoose.model() method is the most important in this case. Its job is to take a blueprint object and in turn, create the necessary database collection out of the model. We get this blueprint by making a new schema instance from the mongoose.Schema() object constructor. Notice how the mongoose.Schema() method takes an object {} as its parameter?  The structure of that object is how each new document put into the collection will be formatted. You can learn about other Schema Types here

            http://mongoosejs.com/docs/schematypes.html

        When we create a User variable to export and set it to the returned value of the mongoose.model() function: a model object is created using the singular version of the collection name ('User') and the mongoose schema (UserSchema). This model will be used to enable all our needed CRUD functionality. Exporting the User variable will allow us to import and use the User model in any file we choose. 

        Note: After we create our first document using this model, we will find a lowercase, plural version of the collection name in our database. In this case, "users"


    Use Mongoose Models to Create/Retrieve/Update/Destroy 

        Navigate your way to the controllers folder where you will create the user.controller.js file that will house all of our CRUD functionality. Notice at the top of the file we do not have a require("mongoose") statement. Instead we have a require("../models/user.model") statement which is importing the User variable that we exported from the user.model.js file. In our controller file, we export different functions that perform the basic CRUD operations using our User model. 

            const User = require('../models/user.model');
             
            module.exports.findAllUsers = (req, res) => {
                User.find()
                    .then((allDaUsers) => {
                        res.json({ users: allDaUsers })
                    })
                    .catch((err) => {
                        res.json({ message: 'Something went wrong', error: err })
                    });
            }
             
            module.exports.findOneSingleUser = (req, res) => {
                User.findOne({ _id: req.params.id })
                    .then(oneSingleUser => {
                        res.json({ user: oneSingleUser })
                    })
                    .catch((err) => {
                        res.json({ message: 'Something went wrong', error: err })
                    });}
             
            module.exports.createNewUser = (req, res) => {
                User.create(req.body)
                    .then(newlyCreatedUser => {
                        res.json({ user: newlyCreatedUser })
                    })
                    .catch((err) => {
                        res.json({ message: 'Something went wrong', error: err })
                    });}
             
            module.exports.updateExistingUser = (req, res) => {
                User.findOneAndUpdate(
                    { _id: req.params.id },
                    req.body,
                    { new: true, runValidators: true }
                )
                    .then(updatedUser => {
                        res.json({ user: updatedUser })
                    })
                    .catch((err) => {
                        res.json({ message: 'Something went wrong', error: err })
                    });}
             
            module.exports.deleteAnExistingUser = (req, res) => {
                User.deleteOne({ _id: req.params.id })
                    .then(result => {
                        res.json({ result: result })
                    })
                    .catch((err) => {
                        res.json({ message: 'Something went wrong', error: err })
                    });}


        A couple of key points: 

            User is a constructor function which can create new user objects and also has other methods that will talk to the other database. 

                the .then() will only execute upon successfully inserting data into the database 
                the .catch() will execute only if there is an error


    Routing 

        Navigate your way into the routes folder where you will create the user.routes.js fille that wll be responsible for all of our routes dealing with the user model. Notice at the tp of the file this time we have a require("..controllers/user.controller") statement which is importing everything we exported from the controller file. 

            const UserController = require('../controllers/user.controller');
             
            module.exports = app => {
                app.get('/api/users', UserController.findAllUsers);
                app.get('/api/users/:id', UserController.findOneSingleUser);
                app.put('/api/users/:id', UserController.updateExistingUser);
                app.post('/api/users', UserController.createNewUser);
                app.delete('/api/users/:id', UserController.deleteAnExistingUser);
            }

        Note: The order of these routes matter. If you have a route that uses a wildcard like :id before a path with a specified name, the wildcard route will always run. Move specific routes to the top to ensure they are followed. For example, if you wanted to create a get route with a specific path, it would have to go before your get route for a single document. The following is an example of what not to do. As the allusers route would never be accessed because the :id route would also match the string allusers.

            const UserController = require('../controllers/user.controller');
             
            module.exports = app => {
                app.get('/api/users/:id', UserController.findOneSingleUser);
                app.get('/api/users/allusers', UserController.findAllUsers);
            }


    Server 

        Last but not least is our server.js file. Because we modularized our files from the start, this allows our server.js file to contain only a few lines of code, allows us to be able to easily expand our app, and helps us keep organized. Take a moment to look over the server.js file and familiarize yourself with whats happening. 

            const express = require("express");
            const app = express();
                
            require("./config/mongoose.config");
                
            app.use(express.json(), express.urlencoded({ extended: true }));
                
            const AllMyUserRoutes = require("./routes/user.routes");
            AllMyUserRoutes(app);
                
            app.listen(8000, () => console.log("The server is all fired up on port 8000"));

        There is a lot that is happening in the code above so take a couple minutes to review and make sure that you understand everything that is going on. When you feel comfortable to move on, run the server using Nodemon in your terminal 

            nodemon server.js 

    
    Debug 

        If it doesn't work make sure the following things are done: 

            1. Make sure your MongoDB server is running the mongod command 
            2. Make sure your post data matches the data that you are inserting into the database 
            3. Make suer that your form submits a post request to '/users' 
            4. Make sure that mongoose is actually installed. 
            5. Check the order of everything related to mongoose(require -> connect -> Schema -> Model -> route) 
            6. Use lots of console.log statements and follow the flow of data. 


Common Mongoose Commands

    Heres a list and examples of some common Mongoose Commands you may need to use. These will be used in most Mongoose projects so make sure to practice them as much as you can. 

        Defining a User Schema 

            // Create a Schema for Users
            const UserSchema = new mongoose.Schema({
             name: { type: String },
             age: { type: Number }
            }, { timestamps: true })
            // create a constructor function for our model and store in variable 'User'
            const User = mongoose.model('User', UserSchema);

        Finding All Users 

            // ...retrieve an array of all documents in the User collection
            User.find()
                .then(users => {
                    // logic with users results
                })
                .catch(err => res.json(err));

        Finding all Users where their name is Jessica 

            // ...retrieve an array of documents matching the query object criteria
            User.find({name:'Jessica'}) 
                .then(usersNamedJessica => {
                    // logic with usersNamedJessica results
                })
                .catch(err => res.json(err));

        Finding one User by _id 

            // ...retrieve 1 document (the first record found) matching the query object criteria
            User.findOne({_id: '5d34d361db64c9267ed91f73'})
                .then(user => {
                    // logic with single user object result
                })
                .catch(err => res.json(err));

        Create a User 

             // ...create a new document to store in the User collection and save it to the DB.
            const bob = new User(req.body);
            // req.body is an object containing all the users data.
            // if we look at req.body as an object literal it would look like this
                /*
                 * req.body = {
                 *		"name": "Bob Ross",
                 *		"age": 42
                 *	}
                **/
            bob.save()
                .then(newUser => {
                    // logic with successfully saved newUser object
                })
                .catch(err => res.json(err));
             // If there's an error and the record was not saved, this (err) will contain validation errors

        Create a User Simplified 

             // ...create a new document to store in the User collection and save it to the DB.
            const { userData } = req.body;
            User.create(userData)
                .then(newUser => {
                    // logic with successfully saved newUser object
                })
                .catch(err => res.json(err));
             // If there's an error and the record was not saved, this (err) will contain validation errors.

        Delete All Users 

            // ...delete all documents of the User collection
            User.remove()
                .then(deletedUsers => {
                    // logic (if any) with successfully removed deletedUsers object
                })
                .catch(err => res.json(err));

        Delete One User 

            // ...delete 1 document that matches the query object criteria
            User.remove({_id: '5d34d361db64c9267ed91f73'})
                .then(deletedUser => {
                    // logic (if any) with successfully removed deletedUser object
                })
                .catch(err => res.json(err));

        Update One Record 

            // ...update 1 document that matches the query object criteria
            User.updateOne({name:'Bob Ross'}, {
                name: 'Ross Bob',
                $push: {pets: {name: 'Sprinkles', type: 'Chubby Unicorn' }}
            })
                .then(result => {
                    // logic with result -- note this will be the original object by default!
                })
                .catch(err => res.json(err));

        Advanced Queries 

            User.findOne({name: 'Bob Ross'})
                .then(user => {
                    user.name = 'Rob Boss';
                    user.pets.push({name: 'Sprinkles', type: 'Chubby Unicorn'});
                    return user.save();
                })
                .then(saveResult => res.json(saveResult))
                .catch(err => res.json(err));

        Validate for uniqueness before creating new DB entry 

            User.exists({name: req.body.name})
                .then(userExists => {
                    if (userExists) {
                        // Promise.reject() will activate the .catch() below.
                        return Promise.reject('Error Message Goes Here');
                    }
                    return User.create(req.body);
                })
                .then(saveResult => res.json(saveResult))
                .catch(err => res.json(err));

        Mongoose Commands 

            http://mongoosejs.com/docs/index.html


Validations 

    Validating new entries for Mongoose models is a breeze. Let's say, for our users we wanted to make the first name, last name, and the email required. We can add our validation in our Mongoose Model like this 

        // Create a Schema With Validations for a User
        const UserSchema = new mongoose.Schema({
            first_name: { 
              type: String,
              required: [true, "First name is required"],
              minlength: [6, "First name must be at least 6 characters long"]
            },
            last_name: { 
              type: String,
              required: [true, "Last name is required"],
              maxlength: [20, "Last name must be less than 20 characters long"]
            },
            age: { 
              type: Number ,
              min: [1, "You must be at least 1 year or older to register"],
              max: [150, "You must be at most 149 years to register"]
            },
            email: {
              type: String,
              required: [true, "Email is required"] 
            }
          }, 
        { timestamps: true }
        );
        const User = mongoose.model("User", UserSchema);
        module.exports = User;

    What you'll notice is that the validation methods in Mongoose are pretty one-dimensional; we pretty much have to validate things using optional parameters in our schema definition. Making required fields is easy, but more intricate validations (email strings, date, etc) can get ugly. We can validate our data just fine, but the code gets kind of messy. That's a bummer, but there are some things that JavaScript isn't very good for and this is one of them. To make it easer, Mongoose has added a lot of new validation options to help us validate many options 

        Mongoose Validations 

            https://mongoosejs.com/docs/validation.html

    