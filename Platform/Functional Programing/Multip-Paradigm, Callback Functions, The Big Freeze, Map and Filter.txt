

JavaScript is Multi-Paradigm 

    When JavaScript was initially being designed, it was envisioned that the language would work like popular functional languages like Lisp. However at the time Java, an OOP language was and still is very popular and it was decided to make JavaScript resemble a scripting version of Java. As such JavaScript retains a syntax that at least superficially resembles Java, but functions (first class) treated like any other variable and Java
     also supports writing programs in an OOP style, through prototype inheritance. As such JavaScript is multi-paradigm and we can write it procedurally functionally or object oriented-ly or any combination of the above. 

    In the early days of front-end frameworks, AngularJS was designed to apply the MVC pattern to our front-end and such a lot of OOP was being used. More recently with react, Vue and Angular (from version 2 onwards) the pattern moved away from MVC to whats known as component based architecture. Many lesions have been learned in this time about how shared state and bi-directional data flow are not necessarily the best way and many devs using these frameworks have moved in the direction of functional programming. 

    Functional Programing is completely different way of designing our programs, instead of making classes (things that tightly bind both dat and functions together) we will be separating the data from the actions. 


    When using functional programming our functions should: 

        Be transparent- every time a function is called with the same inputs it should return the same results.
        Be pure- The function should remain pure, and the values of the parameter passed are not allowed to be changed. We will be making copies of arrays or objects passed in rather than working in place. 
        Avoid side effects- the function shouldn't make API calls, write to file-systems or databases, or print to console.
        Never be void- our functions have to return a value. If they don't then what they did must have violated one of our previous rules around side-effects or mutating an input. 

        If this all sounds limiting, thats because it is. However, following these patters will make bugs easy to spot and can result in a performance boost from using immutable data structures. 

        Note- It wont be possible for every function we write in our projects to be "transparent and without side-effects" as getting information from the API or database generating random numbers, or getting date times will violate some rules for our functions. 


Callback Functions 

    Let us consider the JavaScript setTimeout() function it allows us to define a delay in our code. 

        setTimeout( function() { 
        console.log("start") 
        }, 3000 );
            
        console.log("end");

    When we examine this function, there are 2 parameters that it expects:

        1. a function 
        2. a number

    Lets talk about the number first-- it represents the delay in milliseconds, in the above example this is 3000, and hte other function, whatever code we want to run after the delay. 

    This function parameter is called by setTimeout() like a function. It represents something that we conventionally refer to as a callback function, a function that is passed onto another function to be called by that function. In JavaScript, functions are treated like any other variable type. 

        > typeof( "hello" );
        'string'
        > typeof( function() {} );
        'function'

    We can declare a variable and set it to equal to a function then call that function using the variable name. 

        var exampleFunction = function(message){
        console.log( message );
        };
            
        exampleFunction( "Hello from exampleFunction" );

    As we saw in the example above, we can also pass a function as a parameter into a parent function. In this case let's call this parameter callback and pass it as a message. 

        function parentFunction( callback ) {
        callback( "information from the parent function" );
        }

    We can then call the parent function like this. 

        parentFunction (exampleFunction );

    These sort of functions are often used with anonymous functions, (functions without a name) and we could rewrite our example to be called like this. 

        parentFunction( function(message) {
            console.log(message);
        });

    Callback functions will see a lot of use when;

        Some code needs to be run after an event(user clicks a button, user visits the website)
        Making API calls (it takes some time for the data to come back from another server or our own back-end server) 
        Querying a database(it can take a while if queries are writing a lot of data or needing to access the database multiple times)


The Big Freeze!

    Object.Freeze()

        As we've seen before, when we declare a variable using const, we are not longer able to set it equal to a different variable, but if the variable is an array or object we're still able to modify that object by pushing or popping values into or from it, or changing values that are stored in it! 

            const arr = [1,2,3,4];
            arr.push(300); // even though arr is declared with `const` we can still push new values into it 

        If we want to prevent even those sorts of changes we can use Object.Freeze90 to give our object or array immutability. 

            const arr = Object.freeze([1,2,3,4]);
            arr.push(300); // we're no longer allowed to change `arr`


    Spread, Concat and Slice 

        Lets say we have an immutable list of groceries 

            const groceryList = Object.freeze([
            { "item": "carrots",           "haveIngredient": false },
            { "item": "onions",            "haveIngredient": true  },
            { "item": "celery",            "haveIngredient": false },
            { "item": "cremini mushrooms", "haveIngredient": false },
            { "item": "butter",            "haveIngredient": true  }
            ]);

        Need Thyme 

            If we decide that we need to add "Thyme" to the list we can use spread to make a copy of the list and add "thyme" to it. 

                const needThyme = [ ...groceryList, { "item": "thyme", "haveIngredient": false } ];

            the ...groceryList at the beginning of the array is making a copy of the objects already in groceryList. We then follow this with a comma, as if we are simply declaring an array with a new "Thyme" object. 

            we can also use .concat() for this one. Concat is a method that essentially takes two arrays, glues them together and gives us ack the new array. 

                const needThyme = groceryList.concat( [ { "item": "thyme", "haveIngredient": false } ] );

        Got Thyme? 

            if we find that we already have "thyme" and we want to set the haveIngredient to true we can write something like 

                const gotTheThyme = [ ...needThyme.slice(0, 5), { ...needThyme[5], "haveIngredient": true } ];

            Slice is a function that can take 2 parameters and return an array of the values that have indexes between those two parameters. The first number (index 0 in this example) will be included in our returned array. The second number (index 5 in this example) will not be included in the returned array 

                Official Documentation- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice

            We can follow up that returned array with a comma and a new object. Inside the new object we can use the spread operator to copy over the attributes from the ingredient at index 5 and overwrite its haveIngredient to be true. 

        Ingredient not Necessary 

            If celery is not needed, we could remove it using slice. 

                Â  const notNeceCelery = [ ...gotTheThyme.slice(0, 2), ...gotTheThyme.slice(3) ];

            Once again we can use slice. the first slice giving us the ingredients at indexes 0 and 1 because index 2 is not included, the second slice giving us all the ingredients with indexes from 3 to the end. 


        Sorting 

            The sort function is really useful, however whe nwe run it it manipulates the array it was run upon instead of giving us a new one. 

                const items = Object.freeze(["carrots", "onions", "celery", "mushrooms", "butter", "thyme"]);
                items.sort(); // this will throw an error 

            We can get around this error with some clever use of the spread operator. 

                const sortedItems = [...items].sort();

            This will return the grocery list items in a sorted manner because a copy was made. 

        Sorting Gotcha 

            Sort is really handy, however there is a bit of a trap. If what were sorting is numbers, it will not return the proper numbers. 

                const numbers = [10, 5, 3, 12, 22, 8];
                numbers.sort();
                // this will return [10, 12, 22, 3, 5, 8 ]

            It is currently sorting by the last value not including the first one. Heres a work around. https://www.w3schools.com/jsref/jsref_sort.asp

        Sorting Objects 

            Sometimes what we want to sort is based off of an attribute inside of an object. We can still do that using sort by using a callback function.  Referring back to our groceryList example. We could sort the ingredient objects based upon the ingredient name using the following.

                const sortedGroceries = [...groceryList].sort( (a, b) => (a.item > b.item) ? 1 : -1 );


            Notice how this time we have to write a callback function inside of sort letting it know what attribute to use when sorting. 

    
    Map and Filter 

        .map() 

            One of the functions that w'll be using most frequently is map. Map will make a copy of an array and apply our own twist two it. Using a call back function that takes in each element of the array returning what we want to do to each element. 

                const groceries = ["pearl onions", "cremini mushrooms", "thyme"];
                const groceryList = groceries.map( item => `<li>${item}</li>` );

            This will take a list of items and return an array of strings resembling HTML "list items" 

                [ "<li>pearl onions</li>", "<li>cremini mushrooms</li>", "<li>thyme</li>" ]

            We can also use map with an array of numbers. 

                const values = [1, 2, 3, 4, 5];
                const cubes = values.map( val => val**3 );

            This will create a list of cubed numbers [1, 8, 27, 64, 125]

            Map is a function that applies a callback function to each item in an array and returns that new array. 

    .filter()

        Sometimes we want to get an array with only some of the values from the original array. We do this by providing a callback function that returns either true or false for each element in the array. If the function returns true, the filter method will add it to the new array that will be returned in the end. If we do not want the element in the new array we return false. 

            const values = [1, 2, 3, 4, 5];
            const evens = values.filter( val => val % 2 === 0 );

        Note- This will not modify the original array. 

        This will create a list of only the even values, if we wanted the odds we would change the === to !== 

        If we want only the groceries that have the letter o in them we could write 

            const groceries = ["pearl onions", "cremini mushrooms", "thyme"];
            const oFoods = groceries.filter( item => item.includes("o") );

        We can do anything we want with that callback function as long as it returns true or false. We can even chain filter and map together if we wanted to. 

            const values = [1, 2, 3, 4, 5];
            const oddCubes = values.filter( val => val % 2 !==0 ).map( val => val**3 );

        This will filter out the even numbers and cube the ones that are left over. 1, 27, 125 


Extra

    Node Package Manager 

        While Node is just a JavaScript interpreter. it is Node Package Manager, or NPM that make sit such a powerful development platform. Learning NPM will supercharge our node by allowing us to bring in new tools. 

        What is it? 

            NPM is a package manager and the default tool that comes with node.js to manager your project dependencies. 

            What are dependencies you ask? In this case they're just JavaScript files and libraries that give us tools to make applications with, such as ready-made function that spins up a server with ease. Meaning that NPM is jus tat ool to fetch and prepare other chunks of code. in the MERN stacks well call those chunks modules. Depending on what technologies you've used in the past these modules are very similar to ruby gems and python libraries often generalized as middleware. 

            NPM can install and use modules from either a local destination on your computer or it can get them from a remote location called the NPM registry. An online home for node modules. There are thousand of packages that the node community has generated. 




