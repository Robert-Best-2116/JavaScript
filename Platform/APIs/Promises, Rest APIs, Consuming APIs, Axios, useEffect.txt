

About Promises 

    Up until now when we have been working with JavaScript we have been writing code that is synchronous. 

        // some example code you might write
        const myArray = doSomething();
        doSomethingToMyArray(myArray);
        console.log("This message will wait until the above lines complete");

    JavaScript will run our code line by line, and also know to wait for whatever is being executed to finish before moving on to the next line. This is a very good thing, as if the doSomething unction happens to take a while to execute, we don't have to worry if the myArray variable will be undefined when it gets passed into the doSomethingToMyArray function. 

    However, as we start exploring getting information from either outside sources, or our own Back-End server, we need to be able to write code that gracefully receives data, which often can take an indeterminate amount of time to arrive, and doesn't lock up the app while it waits for the data to come back. 

    To this end, we will be introducing a new concept, a design pattern called Promises. 

    
    What is a Promise?

        A promise is a pattern where the eventual response (and how long it will take to receive) it is not known. 

        Promises have 3 states

            Pending-The Outcome is not yet determined
            Resolved-The Outcome is completed successfully
            Rejected-The outcome is completed with errors 

        An example promise would look like the following

            const noMondays = new Promise( (resolve, reject) => {
                if(new Date().getDay() !== 1) {
                    resolve("Good, it's not Monday!");
                } else {
                    reject("Someone has a case of the Mondays!");
                }
            });
            noMondays
                .then( res => console.log(res) )
                .catch( err => console.log(err) );

        Try changing the day in the above if statement so you get to see both the resolve and the reject code run. Where are each of the following handled? 

        While the promise is unfulfilled any code that comes after it is free to run. We also have two distinct methods that get called where we handel the case where the promise is resolved .then() and the case where the promise is rejected .catch() 


        Advantages of Promises 

            Better control of asynchronous code flow 
            Easy to read 
            Avoiding "callback hell"

        Resources 

            https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise

            https://developers.google.com/web/fundamentals/primers/promises


Intro to Rest API's 

    What is an API? Technically speaking, API stands for Application PRogramming Interface. This sounds a little mysterious, so let's dig into it a little more. If you have a program, you many want it to communicate with another program that is written in a different technology, tech stack, etc. So, generally speaking, an API is the interface that allows one program/application to communicate with another. Think of it as a bridge. You can have two separate terrains, but an API is the bridge between the two. Many times you will hear the term RESTful API or REST API. A RESTful API, specifically, is an API that communicates among and between web services. These APIs follow a certain set of rules that make sure it is easy for people to implement them. By following a consistent set of conventions, learning different RESTful APIs will become quite easy and streamlined. 