

About Promises 

    Up until now when we have been working with JavaScript we have been writing code that is synchronous. 

        // some example code you might write
        const myArray = doSomething();
        doSomethingToMyArray(myArray);
        console.log("This message will wait until the above lines complete");

    JavaScript will run our code line by line, and also know to wait for whatever is being executed to finish before moving on to the next line. This is a very good thing, as if the doSomething unction happens to take a while to execute, we don't have to worry if the myArray variable will be undefined when it gets passed into the doSomethingToMyArray function. 

    However, as we start exploring getting information from either outside sources, or our own Back-End server, we need to be able to write code that gracefully receives data, which often can take an indeterminate amount of time to arrive, and doesn't lock up the app while it waits for the data to come back. 

    To this end, we will be introducing a new concept, a design pattern called Promises. 

    
    What is a Promise?

        A promise is a pattern where the eventual response (and how long it will take to receive) it is not known. 

        Promises have 3 states

            Pending-The Outcome is not yet determined
            Resolved-The Outcome is completed successfully
            Rejected-The outcome is completed with errors 

        An example promise would look like the following

            const noMondays = new Promise( (resolve, reject) => {
                if(new Date().getDay() !== 1) {
                    resolve("Good, it's not Monday!");
                } else {
                    reject("Someone has a case of the Mondays!");
                }
            });
            noMondays
                .then( res => console.log(res) )
                .catch( err => console.log(err) );

        Try changing the day in the above if statement so you get to see both the resolve and the reject code run. Where are each of the following handled? 

        While the promise is unfulfilled any code that comes after it is free to run. We also have two distinct methods that get called where we handel the case where the promise is resolved .then() and the case where the promise is rejected .catch() 


        Advantages of Promises 

            Better control of asynchronous code flow 
            Easy to read 
            Avoiding "callback hell"

        Resources 

            https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise

            https://developers.google.com/web/fundamentals/primers/promises


Intro to Rest API's 

    What is an API? Technically speaking, API stands for Application PRogramming Interface. This sounds a little mysterious, so let's dig into it a little more. If you have a program, you many want it to communicate with another program that is written in a different technology, tech stack, etc. So, generally speaking, an API is the interface that allows one program/application to communicate with another. Think of it as a bridge. You can have two separate terrains, but an API is the bridge between the two. Many times you will hear the term RESTful API or REST API. A RESTful API, specifically, is an API that communicates among and between web services. These APIs follow a certain set of rules that make sure it is easy for people to implement them. By following a consistent set of conventions, learning different RESTful APIs will become quite easy and streamlined. 


Consuming API's 

    The built-in method to consume data from an API in Javascript is fetch, which uses promises. This method has the following syntax: 

        fetch("http://www.example.com")
            .then(response =>{
                //do something
            }).catch(err => {
                console.log(err);
            })

    We can also write it using async/await which is ES7

        let response = await fetch("http://www.example.com");

    Knowing this, let's create a simple html file that we can start using fetch in. 

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="X-UA-Compatible" content="ie=edge">
            <title>Document</title>
        </head>
        <body>
            <div id = "root"></div>
            <script>
                fetch("https://pokeapi.co/api/v2/pokemon")
                  .then(response => {
                    // not the actual JSON response body but the entire HTTP response
                    return response.json();
                }).then(response => {
                    // we now run another promise to parse the HTTP response into usable JSON
                    console.log(response);
                }).catch(err=>{
                    console.log(err);
                });
            </script>
        </body>
        </html>

    What did we just do? First, we created a request to the endpoint "https://pokeapi.co/api/v2/pokemon" via fetch. If you were to copy this into an html file yourself and then open it, you would see the Pokemon response in the JavaScript console. Using fetch is a very easy way to get a simple request going in your html file. By default, fetch gives us the entire raw HTTP response we get from our API call, and it's not yet ready for JavaScript to read! Our first promise, the .then statement resolves our API, and then our second .then is a promise for parsing it into useable JSON. Thats why we run the .then twice using fetch!

        Documentation 

            https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch


Axios 

    Fetch is extremely useful in vanilla JavaScript, but thanks to the NPM community, there aer many third party libraries that allow us to easily expand upon the functionality of Javascript. One of these libraries is Axios. Axios is a library that allows us to easily configure API calls in JavaScript and our React app. You can use a CDN or install it directley into your NPM project, to install it into your NPM project. 

        npm install axios 

    Now we can use it in our project doing the following: 

        import axios from 'axios';
        ...
        axios.get('http://www.example.com').then(response=>{
            console.log(response);
        })

    This looks very similar to fetch. However, we can specify the type of the request directly using Axios, so there are no extra arguments required to specify a POST or GET request. 

    Let's talk about the useEffect hook again. When we make API calls, we will generally want to do it only when the component first renders. For example: 

        import React, { useEffect, useState } from 'react';
        import axios from 'axios';
        ...
        const someComponent = props => {
            // Note the second argument is an empty array
            const [responseData, setResponseData] = useState(null);
            useEffect(()=>{
                axios.get('http://www.example.com')
                    .then(response=>{setResponseData(response.data)})
            }, []);  // This empty array forces useEffect to render ONLY when the component first renders
            return(
                <div>
                    {responseData}
                </div>
            )
        }


useEffect 

    With React hooks, we are able to manage state in a normally stateless (functional) component. By using something like this: 

        const [pieceOfState, setPieceOfState] = useState('initial value here');

    We can have information attached to our component and change it accordingly. UseEffect is another hook that we can use in functional components. We use useEffect in order to manage "side Effects" in our React project. If you use useEffect in a functional component, this method will execute directly after the component is rendered, and every time the component updates. 

    A common way useEffect is used when making a call to an API. For example, let's say we are creating an app that will display a list of people in the database. We want to make an API call when the component first renders. 

        const Example = (props) => {
            const [people, setPeople] = useState([]);
         
            useEffect(() => {
                fetch('https://swapi.dev/api/people/')
                    .then(response => response.json())
                    .then(response => setPeople(response.results))
            }, []);
         
            return (
                <div>
                    {people.length > 0 && people.map((person, index)=>{
                        return (<div key={index}>{person.name}</div>)
                    })}
                </div>
            );
        }
        export default Example;

    Fetch is simply a request in JavaScript. When we make a request to the Star Wars API, we will get a response, and part of that response is a list of the people in the Star Wars API we will use setPEople in order to keep track of the list of the people. In our return, we will only map through the peoples names if there is at least one person. Otherwise it will just output nothing. 

    
    Second Argument 

        useEffect takes an optional second argument: an array that contains different variables. This second argument is very powerful, because we can be more specific and tell useEffect exactly when we want it to run. useEffect will always run on first render. It will also run when a variable in the second argument array changes. So, let's look at the following example: 

            useEffect(()=>{
                alert("When will this run?");
            }, []);

        When will this run? Well, we know it will run on first render(right when we load the component). However, it will also change whenever a variable in the second argument changes. If we have an empty array in the second argument, it will never change. Therefore, it will only run on first render. 

        Let's look at another example. Let's say we wanted it to run when something in state changed. For example, we want to run the method when we submit a form. We could write the following: 

            useEffect(()=>{
                alert("When will this run?");
            }, [state.isSubmitted]);

        In this case, if we submit the form, state.isSubmitted will change in our onSubmitHandler. So state.isSubmited will change and useEffect will be triggered. 

        In Conclusion, useEffect is a hook that will be called after every render, including the first one and every update thereafter. It is important to remember that we can use useEffect for making an aPI call when a component first loads. 


    Cleaning up on Unmounting 

        Sometimes, you might have a situation in which you've initiated something inside a useEffect call that is ongoing, such as a setInterval call or a socket connection. When the component is unmounting, as when the user changes to a different route, it is important to clean up so that your application doesn't develop a memory leak. To clean up, you can optionally return a function from your useEffect callback. For example, consider the following code:

            // TimeDisplay.js
            import React, { useEffect, useState } from 'react';
             
            export default () => {
                const [time, setTime] = useState(new Date().toLocaleString());
             
                useEffect(() => {
                    const int = setInterval(
                        () => setTime(new Date().toLocaleString()),
                        1000
                    );
             
                    return function clearInt() {
                        clearInterval(int);
                    }
                }, []);
             
                return (
                    <div>Current Time: {time}</div>
                );
            }

        Let's go through what's happened in the body of our useEffect callback. We create an int variable and assign it to the result of invoking the setInterval function. We pass setInterval two arguments: 1 an anonymous function which updates the time with the current time, and two the interval, which is 1000 milliseconds, or one second. We then return a function called clearInt (could also be an anonymous or even an arrow function), which clears the interval. If we didn't do this, our application would continue to run the setInterval callback at 1 second intervals until the user either did a hard refresh or left the app entirely. 

            Additional Documentation

                https://reactjs.org/docs/hooks-effect.html

                https://developer.mozilla.org/en-US/docs/Web/API/setInterval