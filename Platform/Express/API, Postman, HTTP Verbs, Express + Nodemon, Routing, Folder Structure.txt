

What is an API? 

    An API is an Application Programming Interface, in a general sense it is a contract that governs how different parts of an application interact. a Web API, which is what we'll be focusing on, is neither a server nor a database; rather, it is a set of HTTP endpoints and rules we need to follow to both retrieve data from and make changes to resources through the service. You can think of web API's as middlemen for our web; they sit in between our frontend code and the actual databases backing them.

    API endpoints are usually web URLs where you can pass information either through the URL or in the body of the request and the server returns JSON or an alternative structured data format such as XML. Express will be our API that serves our index.html page but also returns JSON data to our front end framework. Our ultimate goal is to have React or any front end framework handle everything on the client end and not have to worry about any database operations that could slow it down. 


Postman 

    Postman is an awesome developer tool that allows us to interact with restful API's made by others and/or ourselves. It is a user interface that helps us make HTML requests without writing a bunch of code. Imagine creating data without having to create an html page with a form that goes to a route on our server end, which processes the input from the form and creates a new object, then finally redirects to another tml page that we have to make which will show the newly created object. 


HTTP Methods 

    Forms, Data Transferring, and Routing Rules 

        The modern Internet is user-driven; all the actual content of a website is generated by the users of a website. How does the user manager to get his or her data to the page? Forms, the HTML form is a way in which users are able to pass data to the back end of a website where data can be processed and stored. Designing forms and processing the information correctly is a huge part of what it takes to become a back-end developer. 

    HTTP Methods: 

        If you are not already familiar with HTTP request methods, heres the run-down:

            GET: used for passing insensitive information 
            POST: used for passing sensitive information 
            PUT: used for updating whole sensitive information
            PATCH: used for updating pieces of sensitive information
            DELETE: is used for deleting sensitive information 

        When you create a form tag in HTML, you always need to specify the method used to send the request. The method attribute specifies the type of HTTP request by how you, as the developer, want to have your form information transferred. If your form data contains password data, credit card numbers, SSNs, etc, use POST. If the information is something insensitive like a library search, it's okay to use GET as your method. 

    GET 

        When making GET requests, query parameters are sent as part of the URL. That is why they are not used for sensitive information, as they can also be cached and bookmarked. 

    POST 

        POST requests send data behind the scenes, inside the HTTP request body. There never cached, they don't linger in browser history, cant be bookmarked and there are no restrictions on how much data you can send. The majority of HTTP request methods you'll be dealing with will be POSTs. Forms that control user registration, user authentication and authorization, and creating new objects to store in the database will all be processed as POST requests. 

    PUT

        PUT requests work the same as POST requests; however, a PUT request is used to update a whole entity in the database. 

    PATCH

        PATCH requests work the same as POST and PUT requests; however, a PATCH request is used to update a piece of an entity in the database. 

    DELETE

        DELETE requests are often used to delete an entity from a database. 

    Note on HTML Forms 

        Native HTML forms, without the help of JavaScript, can only make GET and POST requests. A number of web frameworks allow devs to "fake" the other HTTP verbs by passing i na hidden form input. For example, the following form when submitted must be processed by the framework as a PUT request even though it is technically making a POST request.

            <form action="/process-form" method="POST" >
                <input type="hidden" name="_method" value="PUT" >


Express 

    What is Express? 

        Express.js is a framework written in JavaSCript which acts as an interface to Node's server functionality. It is also the E in the MERN stack, so it must be important! Express allows us to create a robust server with more or less whatever architecture we choose. There are many other server frameworks for Node including Hapi, Koa, and Fastify; however Express is extremely popular. 

    Using Express 

        run npm install in the server file, 